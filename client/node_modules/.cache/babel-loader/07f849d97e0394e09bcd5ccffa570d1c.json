{"ast":null,"code":"import L from 'leaflet';\nimport { getJSON } from '../util';\nexport var Pelias = L.Class.extend({\n  options: {\n    serviceUrl: 'https://api.geocode.earth/v1',\n    geocodingQueryParams: {},\n    reverseQueryParams: {}\n  },\n  initialize: function (apiKey, options) {\n    L.Util.setOptions(this, options);\n    this._apiKey = apiKey;\n    this._lastSuggest = 0;\n  },\n  geocode: function (query, cb, context) {\n    var _this = this;\n\n    getJSON(this.options.serviceUrl + '/search', L.extend({\n      api_key: this._apiKey,\n      text: query\n    }, this.options.geocodingQueryParams), function (data) {\n      cb.call(context, _this._parseResults(data, 'bbox'));\n    });\n  },\n  suggest: function (query, cb, context) {\n    var _this = this;\n\n    getJSON(this.options.serviceUrl + '/autocomplete', L.extend({\n      api_key: this._apiKey,\n      text: query\n    }, this.options.geocodingQueryParams), L.bind(function (data) {\n      if (data.geocoding.timestamp > this._lastSuggest) {\n        this._lastSuggest = data.geocoding.timestamp;\n        cb.call(context, _this._parseResults(data, 'bbox'));\n      }\n    }, this));\n  },\n  reverse: function (location, scale, cb, context) {\n    var _this = this;\n\n    getJSON(this.options.serviceUrl + '/reverse', L.extend({\n      api_key: this._apiKey,\n      'point.lat': location.lat,\n      'point.lon': location.lng\n    }, this.options.reverseQueryParams), function (data) {\n      cb.call(context, _this._parseResults(data, 'bounds'));\n    });\n  },\n  _parseResults: function (data, bboxname) {\n    var results = [];\n    L.geoJson(data, {\n      pointToLayer: function (feature, latlng) {\n        return L.circleMarker(latlng);\n      },\n      onEachFeature: function (feature, layer) {\n        var result = {},\n            bbox,\n            center;\n\n        if (layer.getBounds) {\n          bbox = layer.getBounds();\n          center = bbox.getCenter();\n        } else if (layer.feature.bbox) {\n          center = layer.getLatLng();\n          bbox = L.latLngBounds(L.GeoJSON.coordsToLatLng(layer.feature.bbox.slice(0, 2)), L.GeoJSON.coordsToLatLng(layer.feature.bbox.slice(2, 4)));\n        } else {\n          center = layer.getLatLng();\n          bbox = L.latLngBounds(center, center);\n        }\n\n        result.name = layer.feature.properties.label;\n        result.center = center;\n        result[bboxname] = bbox;\n        result.properties = layer.feature.properties;\n        results.push(result);\n      }\n    });\n    return results;\n  }\n});\nexport function pelias(apiKey, options) {\n  return new Pelias(apiKey, options);\n}\nexport var GeocodeEarth = Pelias;\nexport var geocodeEarth = pelias;\nexport var Mapzen = Pelias; // r.i.p.\n\nexport var mapzen = pelias;\nexport var Openrouteservice = Mapzen.extend({\n  options: {\n    serviceUrl: 'https://api.openrouteservice.org/geocode'\n  }\n});\nexport function openrouteservice(apiKey, options) {\n  return new Openrouteservice(apiKey, options);\n}","map":{"version":3,"sources":["/home/isnardo/rcr/rose-city-resource/client/node_modules/leaflet-control-geocoder/src/geocoders/pelias.js"],"names":["L","getJSON","Pelias","Class","extend","options","serviceUrl","geocodingQueryParams","reverseQueryParams","initialize","apiKey","Util","setOptions","_apiKey","_lastSuggest","geocode","query","cb","context","_this","api_key","text","data","call","_parseResults","suggest","bind","geocoding","timestamp","reverse","location","scale","lat","lng","bboxname","results","geoJson","pointToLayer","feature","latlng","circleMarker","onEachFeature","layer","result","bbox","center","getBounds","getCenter","getLatLng","latLngBounds","GeoJSON","coordsToLatLng","slice","name","properties","label","push","pelias","GeocodeEarth","geocodeEarth","Mapzen","mapzen","Openrouteservice","openrouteservice"],"mappings":"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","sourcesContent":["import L from 'leaflet';\nimport { getJSON } from '../util';\n\nexport var Pelias = L.Class.extend({\n  options: {\n    serviceUrl: 'https://api.geocode.earth/v1',\n    geocodingQueryParams: {},\n    reverseQueryParams: {}\n  },\n\n  initialize: function(apiKey, options) {\n    L.Util.setOptions(this, options);\n    this._apiKey = apiKey;\n    this._lastSuggest = 0;\n  },\n\n  geocode: function(query, cb, context) {\n    var _this = this;\n    getJSON(\n      this.options.serviceUrl + '/search',\n      L.extend(\n        {\n          api_key: this._apiKey,\n          text: query\n        },\n        this.options.geocodingQueryParams\n      ),\n      function(data) {\n        cb.call(context, _this._parseResults(data, 'bbox'));\n      }\n    );\n  },\n\n  suggest: function(query, cb, context) {\n    var _this = this;\n    getJSON(\n      this.options.serviceUrl + '/autocomplete',\n      L.extend(\n        {\n          api_key: this._apiKey,\n          text: query\n        },\n        this.options.geocodingQueryParams\n      ),\n      L.bind(function(data) {\n        if (data.geocoding.timestamp > this._lastSuggest) {\n          this._lastSuggest = data.geocoding.timestamp;\n          cb.call(context, _this._parseResults(data, 'bbox'));\n        }\n      }, this)\n    );\n  },\n\n  reverse: function(location, scale, cb, context) {\n    var _this = this;\n    getJSON(\n      this.options.serviceUrl + '/reverse',\n      L.extend(\n        {\n          api_key: this._apiKey,\n          'point.lat': location.lat,\n          'point.lon': location.lng\n        },\n        this.options.reverseQueryParams\n      ),\n      function(data) {\n        cb.call(context, _this._parseResults(data, 'bounds'));\n      }\n    );\n  },\n\n  _parseResults: function(data, bboxname) {\n    var results = [];\n    L.geoJson(data, {\n      pointToLayer: function(feature, latlng) {\n        return L.circleMarker(latlng);\n      },\n      onEachFeature: function(feature, layer) {\n        var result = {},\n          bbox,\n          center;\n\n        if (layer.getBounds) {\n          bbox = layer.getBounds();\n          center = bbox.getCenter();\n        } else if (layer.feature.bbox) {\n          center = layer.getLatLng();\n          bbox = L.latLngBounds(\n            L.GeoJSON.coordsToLatLng(layer.feature.bbox.slice(0, 2)),\n            L.GeoJSON.coordsToLatLng(layer.feature.bbox.slice(2, 4))\n          );\n        } else {\n          center = layer.getLatLng();\n          bbox = L.latLngBounds(center, center);\n        }\n\n        result.name = layer.feature.properties.label;\n        result.center = center;\n        result[bboxname] = bbox;\n        result.properties = layer.feature.properties;\n        results.push(result);\n      }\n    });\n    return results;\n  }\n});\n\nexport function pelias(apiKey, options) {\n  return new Pelias(apiKey, options);\n}\nexport var GeocodeEarth = Pelias;\nexport var geocodeEarth = pelias;\n\nexport var Mapzen = Pelias; // r.i.p.\nexport var mapzen = pelias;\n\nexport var Openrouteservice = Mapzen.extend({\n  options: {\n    serviceUrl: 'https://api.openrouteservice.org/geocode'\n  }\n});\nexport function openrouteservice(apiKey, options) {\n  return new Openrouteservice(apiKey, options);\n}\n"]},"metadata":{},"sourceType":"module"}