{"ast":null,"code":"var _jsxFileName = \"/home/isnardo/rcr/rose-city-resource/client/src/components/Results/Map.js\";\nimport React from \"react\";\nimport { Map, TileLayer, Marker, Popup, Tooltip } from \"react-leaflet\"; // import PropTypes from \"prop-types\";\n\nimport Geocoder from \"./Geocoder\";\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport MediaQuery from \"react-responsive\";\nimport { mapDataBuilder } from \"../../utils/api\";\nimport { greenLMarker, blueLMarker } from \"./../../icons/mapIcons.js\";\n\nclass Markers extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.markers = [];\n\n    this.bindMarker = ref => {\n      if (ref) {\n        const marker = ref.leafletElement;\n        this.markers.push(marker);\n      }\n    };\n  }\n\n  render() {\n    const {\n      mapData,\n      updateListing,\n      selectedListing\n    } = this.props;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(MarkerClusterGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, mapData.mapData.map((item, index) => {\n      return /*#__PURE__*/React.createElement(Marker, {\n        key: `${item.popup.id}-${index}`,\n        ref: this.bindMarker // {...this.props}\n        ,\n        position: item.coords,\n        id: item.popup.id,\n        icon: selectedListing === item.popup.id ? greenLMarker : blueLMarker // onClick={() => updateListing(item.popup.id)}\n        // onSelect={() => console.log('slected', item.popup.id)}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Popup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"popup-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 21\n        }\n      }, item.popup.listing), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }\n      }, `${item.popup.street} ${item.popup.street2}`), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"popup-show-details\",\n        onClick: () => {\n          updateListing(item.popup.id, \"popup\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }\n      }, \"Show Details\"))), /*#__PURE__*/React.createElement(MediaQuery, {\n        query: \"(min-width: 993px)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"popup-tooltip\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 23\n        }\n      }, item.popup.listing)))));\n    })));\n  }\n\n}\n\nclass SimpleMap extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mapData: null,\n      zoom: 10,\n      bounds: [],\n      center: [45.52345, -122.6762],\n      currentLocation: null,\n      hasCurrentLocation: false,\n      geocodeLocation: null // windowHeight: undefined,\n      // windowWidth: undefined\n\n    };\n\n    this.handleMapData = data => {\n      const leafletMap = this.leafletMap.leafletElement; //create mapData and bounds\n\n      const mapData = mapDataBuilder(data);\n      this.setState(() => ({\n        mapData\n      }));\n      const bounds = mapData.mapData.map(item => item.coords); //if there are bounds, set them and the center\n\n      if (bounds.length > 0) {\n        const zoom = leafletMap.getBoundsZoom(bounds) - 1;\n        const center = mapData.center;\n        this.setState(() => ({\n          bounds,\n          zoom,\n          center\n        }));\n      }\n    };\n\n    this.handleLocationClick = () => {// const leafletMap = this.leafletMap;\n      // console.log('handle click', this.leafletMap);\n      // if (leafletMap != null) {\n      //   leafletMap.leafletElement.locate({ setView: true, maxZoom: 18 });\n      // }\n    };\n\n    this.handleViewportChanged = () => {\n      const leafletMap = this.leafletMap.leafletElement;\n      const zoom = leafletMap.getZoom();\n      this.setState(() => ({\n        zoom\n      }));\n    };\n\n    this.handleLocationFound = e => {\n      this.setState(() => ({\n        hasCurrentLocation: true,\n        currentLocation: [e.latlng.lat, e.latlng.lng]\n      }));\n    };\n\n    this.handleGeocode = e => {\n      this.setState(() => ({\n        geocodeLocation: [e.lat, e.lng]\n      }));\n    };\n  }\n\n  componentDidMount() {\n    const {\n      data\n    } = this.props;\n    this.handleMapData(data);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      data,\n      selectedListing\n    } = this.props;\n    const leafletMap = this.leafletMap.leafletElement;\n\n    if (this.props.data !== prevProps.data) {\n      this.handleMapData(data);\n    }\n\n    if (this.props.selectedListing !== prevProps.selectedListing) {\n      const selectedItem = data.filter(record => record.id === selectedListing);\n      const selectedCoords = [Number(selectedItem[0].lat), Number(selectedItem[0].lon)];\n      leafletMap.flyTo(selectedCoords, 17);\n    }\n  } // componentWillUnmount() {\n  //   const leafletMap = this.leafletMap.leafletElement;\n  //   // leafletMap.remove();\n  // }\n\n\n  render() {\n    const {\n      updateListing,\n      selectedListing\n    } = this.props;\n    const {\n      bounds,\n      zoom,\n      center,\n      mapData\n    } = this.state;\n\n    if (bounds.length > 0) {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(MediaQuery, {\n        query: \"(min-width: 993px)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Map, {\n        ref: map => this.leafletMap = map,\n        center: center,\n        zoom: zoom,\n        minZoom: 8,\n        maxZoom: 18 //set to 18 since the mapdisappears beyond that.\n        // maxBounds={maxBounds}\n        ,\n        scrollWheelZoom: true,\n        tap: true,\n        dragging: true,\n        touchZoom: true // onViewportChanged={this.handleViewportChanged}\n        // onClick={this.handleLocationClick}\n        // onLocationfound={this.handleLocationFound}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TileLayer, {\n        attribution: \"\",\n        url: \"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Markers, {\n        mapData: mapData,\n        updateListing: updateListing,\n        selectedListing: selectedListing,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Geocoder, {\n        collapsed: false,\n        placeholder: \"Search address...\",\n        handleGeocode: this.handleGeocode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(MediaQuery, {\n        query: \"(max-width: 992px)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Map, {\n        ref: map => this.leafletMap = map,\n        center: center,\n        zoom: zoom,\n        minZoom: 8,\n        maxZoom: 18 //set to 18 since the mapdisappears beyond that.\n        // maxBounds={maxBounds}\n        ,\n        scrollWheelZoom: false,\n        tap: false,\n        dragging: false,\n        touchZoom: true // onViewportChanged={this.handleViewportChanged}\n        // onClick={this.handleLocationClick}\n        // onLocationfound={this.handleLocationFound}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(TileLayer, {\n        attribution: \"\",\n        url: \"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Markers, {\n        mapData: mapData,\n        updateListing: updateListing,\n        selectedListing: selectedListing,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Geocoder, {\n        placeholder: \"Search address...\",\n        handleGeocode: this.handleGeocode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 15\n        }\n      }))));\n    }\n\n    return /*#__PURE__*/React.createElement(Map, {\n      ref: map => this.leafletMap = map,\n      center: center,\n      zoom: zoom,\n      minZoom: 8,\n      maxZoom: 18 //set to 18 since the mapdisappears beyond that.\n      // maxBounds={maxBounds}\n      ,\n      scrollWheelZoom: false,\n      tap: false,\n      dragging: false,\n      touchZoom: true,\n      onViewportChanged: this.handleViewportChanged,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: \"\",\n      url: \"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Geocoder, {\n      handleGeocode: this.handleGeocode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default SimpleMap; //\n// getLocation = () => {\n//   //get current location\n//   const leafletMap = this.leafletMap.leafletElement;\n//   leafletMap\n//     .locate({\n//       setView: true,\n//       watch: true\n//     }) /* This will return map so you can do chaining */\n//     .on('locationfound', function(e) {\n//       // var marker = L.marker([e.latitude, e.longitude]).bindPopup(\n//       //   'Your are here :)'\n//       // );\n//       // var circle = L.circle([e.latitude, e.longitude], e.accuracy / 2, {\n//       //   weight: 1,\n//       //   color: 'blue',\n//       //   fillColor: '#cacaca',\n//       //   fillOpacity: 0.2\n//       // });\n//       // this.setState(() => ({ currentLocation: [e.latitude, e.longitude] }));\n//       console.log('Location', [e.latitude, e.longitude]);\n//     })\n//     .on('locationerror', function(e) {\n//       console.log(e);\n//       alert('Location access denied.');\n//     });\n// };","map":{"version":3,"sources":["/home/isnardo/rcr/rose-city-resource/client/src/components/Results/Map.js"],"names":["React","Map","TileLayer","Marker","Popup","Tooltip","Geocoder","MarkerClusterGroup","MediaQuery","mapDataBuilder","greenLMarker","blueLMarker","Markers","Component","markers","bindMarker","ref","marker","leafletElement","push","render","mapData","updateListing","selectedListing","props","map","item","index","popup","id","coords","listing","street","street2","SimpleMap","state","zoom","bounds","center","currentLocation","hasCurrentLocation","geocodeLocation","handleMapData","data","leafletMap","setState","length","getBoundsZoom","handleLocationClick","handleViewportChanged","getZoom","handleLocationFound","e","latlng","lat","lng","handleGeocode","componentDidMount","componentDidUpdate","prevProps","selectedItem","filter","record","selectedCoords","Number","lon","flyTo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Map, TileLayer, Marker, Popup, Tooltip } from \"react-leaflet\";\n// import PropTypes from \"prop-types\";\nimport Geocoder from \"./Geocoder\";\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport MediaQuery from \"react-responsive\";\nimport { mapDataBuilder } from \"../../utils/api\";\nimport {\n  greenLMarker,\n  blueLMarker,\n} from \"./../../icons/mapIcons.js\";\n\nclass Markers extends React.Component {\n  markers = [];\n\n  bindMarker = (ref) => {\n    if (ref) {\n      const marker = ref.leafletElement;\n      this.markers.push(marker);\n    }\n  };\n\n  render() {\n    const { mapData, updateListing, selectedListing } = this.props;\n\n    return (\n      <React.Fragment>\n        <MarkerClusterGroup>\n          {mapData.mapData.map((item, index) => {\n            return (\n              <Marker\n                key={`${item.popup.id}-${index}`}\n                ref={this.bindMarker}\n                // {...this.props}\n                position={item.coords}\n                id={item.popup.id}\n                icon={\n                  selectedListing === item.popup.id ? greenLMarker : blueLMarker\n                }\n                // onClick={() => updateListing(item.popup.id)}\n                // onSelect={() => console.log('slected', item.popup.id)}\n              >\n                <Popup>\n                  <div className=\"popup-container\">\n                    <div>{item.popup.listing}</div>\n                    <div>{`${item.popup.street} ${item.popup.street2}`}</div>\n                    {/* <div>{item.popup.hours}</div> */}\n                    <div\n                      className=\"popup-show-details\"\n                      onClick={() => {\n                        updateListing(item.popup.id, \"popup\");\n                      }}\n                    >\n                      Show Details\n                    </div>\n                  </div>\n                </Popup>\n                <MediaQuery query=\"(min-width: 993px)\">\n                  <Tooltip>\n                    <div className=\"popup-tooltip\">\n                      <div>{item.popup.listing}</div>\n                    </div>\n                  </Tooltip>\n                </MediaQuery>\n              </Marker>\n            );\n          })}\n        </MarkerClusterGroup>\n      </React.Fragment>\n    );\n  }\n}\n\nclass SimpleMap extends React.Component {\n  state = {\n    mapData: null,\n    zoom: 10,\n    bounds: [],\n    center: [45.52345, -122.6762],\n    currentLocation: null,\n    hasCurrentLocation: false,\n    geocodeLocation: null,\n    // windowHeight: undefined,\n    // windowWidth: undefined\n  };\n\n  handleMapData = (data) => {\n    const leafletMap = this.leafletMap.leafletElement;\n\n    //create mapData and bounds\n    const mapData = mapDataBuilder(data);\n    this.setState(() => ({ mapData }));\n    const bounds = mapData.mapData.map((item) => item.coords);\n\n    //if there are bounds, set them and the center\n    if (bounds.length > 0) {\n      const zoom = leafletMap.getBoundsZoom(bounds) - 1;\n      const center = mapData.center;\n      this.setState(() => ({ bounds, zoom, center }));\n    }\n  };\n\n  handleLocationClick = () => {\n    // const leafletMap = this.leafletMap;\n    // console.log('handle click', this.leafletMap);\n    // if (leafletMap != null) {\n    //   leafletMap.leafletElement.locate({ setView: true, maxZoom: 18 });\n    // }\n  };\n\n  //for whatever reason the leaflet element is firing as null\n  //her so this needs to be modified to handle null cases\n  handleViewportChanged = () => {\n    const leafletMap = this.leafletMap.leafletElement;\n    const zoom = leafletMap.getZoom();\n    this.setState(() => ({ zoom }));\n  };\n\n  handleLocationFound = (e) => {\n    this.setState(() => ({\n      hasCurrentLocation: true,\n      currentLocation: [e.latlng.lat, e.latlng.lng],\n    }));\n  };\n\n  handleGeocode = (e) => {\n    this.setState(() => ({ geocodeLocation: [e.lat, e.lng] }));\n  };\n\n  componentDidMount() {\n    const { data } = this.props;\n    this.handleMapData(data);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { data, selectedListing } = this.props;\n    const leafletMap = this.leafletMap.leafletElement;\n\n    if (this.props.data !== prevProps.data) {\n      this.handleMapData(data);\n    }\n\n    if (this.props.selectedListing !== prevProps.selectedListing) {\n      const selectedItem = data.filter(\n        (record) => record.id === selectedListing\n      );\n      const selectedCoords = [\n        Number(selectedItem[0].lat),\n        Number(selectedItem[0].lon),\n      ];\n      leafletMap.flyTo(selectedCoords, 17);\n    }\n  }\n\n  // componentWillUnmount() {\n  //   const leafletMap = this.leafletMap.leafletElement;\n  //   // leafletMap.remove();\n  // }\n\n  render() {\n    const { updateListing, selectedListing } = this.props;\n    const { bounds, zoom, center, mapData } = this.state;\n\n    if (bounds.length > 0) {\n      return (\n        <React.Fragment>\n          <MediaQuery query=\"(min-width: 993px)\">\n            <Map\n              ref={(map) => (this.leafletMap = map)}\n              center={center}\n              zoom={zoom}\n              minZoom={8}\n              maxZoom={18} //set to 18 since the mapdisappears beyond that.\n              // maxBounds={maxBounds}\n              scrollWheelZoom={true}\n              tap={true}\n              dragging={true}\n              touchZoom={true}\n              // onViewportChanged={this.handleViewportChanged}\n              // onClick={this.handleLocationClick}\n              // onLocationfound={this.handleLocationFound}\n            >\n              <TileLayer\n                attribution=\"\"\n                url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\"\n              />\n              <Markers\n                mapData={mapData}\n                updateListing={updateListing}\n                selectedListing={selectedListing}\n              />\n              {/* <ErrorBoundary>\n                <LocateControl\n                  returnToPrevBounds={true}\n                  cacheLocation={true}\n                  showPopup={false}\n                  strings={{ title: 'Show my location' }}\n                  locateOptions={{\n                    enableHighAccuracy: true\n                  }}\n                  handleLocationFound={this.handleLocationFound}\n                >\n                  <div className=\"gps-icon\">\n                    <GPSIcon />\n                  </div>\n                </LocateControl>\n              </ErrorBoundary> */}\n              <Geocoder\n                collapsed={false}\n                placeholder={\"Search address...\"}\n                handleGeocode={this.handleGeocode}\n              />\n            </Map>\n          </MediaQuery>\n\n          <MediaQuery query=\"(max-width: 992px)\">\n            <Map\n              ref={(map) => (this.leafletMap = map)}\n              center={center}\n              zoom={zoom}\n              minZoom={8}\n              maxZoom={18} //set to 18 since the mapdisappears beyond that.\n              // maxBounds={maxBounds}\n              scrollWheelZoom={false}\n              tap={false}\n              dragging={false}\n              touchZoom={true}\n              // onViewportChanged={this.handleViewportChanged}\n              // onClick={this.handleLocationClick}\n              // onLocationfound={this.handleLocationFound}\n            >\n              <TileLayer\n                attribution=\"\"\n                url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\"\n              />\n              <Markers\n                mapData={mapData}\n                updateListing={updateListing}\n                selectedListing={selectedListing}\n              />\n              {/* <ErrorBoundary>\n                <LocateControl\n                  returnToPrevBounds={true}\n                  cacheLocation={true}\n                  showPopup={false}\n                  strings={{ title: 'Show my location' }}\n                  locateOptions={{\n                    enableHighAccuracy: true\n                  }}\n                  handleLocationFound={this.handleLocationFound}\n                >\n                  <div className=\"gps-icon\">\n                    <GPSIcon />\n                  </div>\n                </LocateControl>\n              </ErrorBoundary> */}\n              <Geocoder\n                placeholder={\"Search address...\"}\n                handleGeocode={this.handleGeocode}\n              />\n            </Map>\n          </MediaQuery>\n        </React.Fragment>\n      );\n    }\n    return (\n      <Map\n        ref={(map) => (this.leafletMap = map)}\n        center={center}\n        zoom={zoom}\n        minZoom={8}\n        maxZoom={18} //set to 18 since the mapdisappears beyond that.\n        // maxBounds={maxBounds}\n        scrollWheelZoom={false}\n        tap={false}\n        dragging={false}\n        touchZoom={true}\n        onViewportChanged={this.handleViewportChanged}\n      >\n        <TileLayer\n          attribution=\"\"\n          url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\"\n        />\n        {/* <LocateControl\n          returnToPrevBounds={true}\n          cacheLocation={true}\n          showPopup={false}\n          strings={{ title: 'Show my location' }}\n          locateOptions={{\n            enableHighAccuracy: true\n          }}\n          handleLocationFound={this.handleLocationFound}\n        >\n          <div className=\"gps-icon\">\n            <GPSIcon />\n          </div>\n        </LocateControl> */}\n        <Geocoder handleGeocode={this.handleGeocode} />\n      </Map>\n    );\n  }\n}\n\nexport default SimpleMap;\n\n//\n// getLocation = () => {\n//   //get current location\n//   const leafletMap = this.leafletMap.leafletElement;\n//   leafletMap\n//     .locate({\n//       setView: true,\n//       watch: true\n//     }) /* This will return map so you can do chaining */\n//     .on('locationfound', function(e) {\n//       // var marker = L.marker([e.latitude, e.longitude]).bindPopup(\n//       //   'Your are here :)'\n//       // );\n//       // var circle = L.circle([e.latitude, e.longitude], e.accuracy / 2, {\n//       //   weight: 1,\n//       //   color: 'blue',\n//       //   fillColor: '#cacaca',\n//       //   fillOpacity: 0.2\n//       // });\n//       // this.setState(() => ({ currentLocation: [e.latitude, e.longitude] }));\n//       console.log('Location', [e.latitude, e.longitude]);\n//     })\n//     .on('locationerror', function(e) {\n//       console.log(e);\n//       alert('Location access denied.');\n//     });\n// };\n"]},"metadata":{},"sourceType":"module"}