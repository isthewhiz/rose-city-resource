{"ast":null,"code":"import L from 'leaflet';\nimport { getJSON } from '../util';\nexport var OpenCage = L.Class.extend({\n  options: {\n    serviceUrl: 'https://api.opencagedata.com/geocode/v1/json',\n    geocodingQueryParams: {},\n    reverseQueryParams: {}\n  },\n  initialize: function (apiKey, options) {\n    L.setOptions(this, options);\n    this._accessToken = apiKey;\n  },\n  geocode: function (query, cb, context) {\n    var params = {\n      key: this._accessToken,\n      q: query\n    };\n    params = L.extend(params, this.options.geocodingQueryParams);\n    getJSON(this.options.serviceUrl, params, function (data) {\n      var results = [],\n          latLng,\n          latLngBounds,\n          loc;\n\n      if (data.results && data.results.length) {\n        for (var i = 0; i < data.results.length; i++) {\n          loc = data.results[i];\n          latLng = L.latLng(loc.geometry);\n\n          if (loc.annotations && loc.annotations.bounds) {\n            latLngBounds = L.latLngBounds(L.latLng(loc.annotations.bounds.northeast), L.latLng(loc.annotations.bounds.southwest));\n          } else {\n            latLngBounds = L.latLngBounds(latLng, latLng);\n          }\n\n          results.push({\n            name: loc.formatted,\n            bbox: latLngBounds,\n            center: latLng\n          });\n        }\n      }\n\n      cb.call(context, results);\n    });\n  },\n  suggest: function (query, cb, context) {\n    return this.geocode(query, cb, context);\n  },\n  reverse: function (location, scale, cb, context) {\n    var params = {\n      key: this._accessToken,\n      q: [location.lat, location.lng].join(',')\n    };\n    params = L.extend(params, this.options.reverseQueryParams);\n    getJSON(this.options.serviceUrl, params, function (data) {\n      var results = [],\n          latLng,\n          latLngBounds,\n          loc;\n\n      if (data.results && data.results.length) {\n        for (var i = 0; i < data.results.length; i++) {\n          loc = data.results[i];\n          latLng = L.latLng(loc.geometry);\n\n          if (loc.annotations && loc.annotations.bounds) {\n            latLngBounds = L.latLngBounds(L.latLng(loc.annotations.bounds.northeast), L.latLng(loc.annotations.bounds.southwest));\n          } else {\n            latLngBounds = L.latLngBounds(latLng, latLng);\n          }\n\n          results.push({\n            name: loc.formatted,\n            bbox: latLngBounds,\n            center: latLng\n          });\n        }\n      }\n\n      cb.call(context, results);\n    });\n  }\n});\nexport function opencage(apiKey, options) {\n  return new OpenCage(apiKey, options);\n}","map":{"version":3,"sources":["/home/isnardo/rcr/rose-city-resource/client/node_modules/leaflet-control-geocoder/src/geocoders/opencage.js"],"names":["L","getJSON","OpenCage","Class","extend","options","serviceUrl","geocodingQueryParams","reverseQueryParams","initialize","apiKey","setOptions","_accessToken","geocode","query","cb","context","params","key","q","data","results","latLng","latLngBounds","loc","length","i","geometry","annotations","bounds","northeast","southwest","push","name","formatted","bbox","center","call","suggest","reverse","location","scale","lat","lng","join","opencage"],"mappings":"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","sourcesContent":["import L from 'leaflet';\nimport { getJSON } from '../util';\n\nexport var OpenCage = L.Class.extend({\n  options: {\n    serviceUrl: 'https://api.opencagedata.com/geocode/v1/json',\n    geocodingQueryParams: {},\n    reverseQueryParams: {}\n  },\n\n  initialize: function(apiKey, options) {\n    L.setOptions(this, options);\n    this._accessToken = apiKey;\n  },\n\n  geocode: function(query, cb, context) {\n    var params = {\n      key: this._accessToken,\n      q: query\n    };\n    params = L.extend(params, this.options.geocodingQueryParams);\n    getJSON(this.options.serviceUrl, params, function(data) {\n      var results = [],\n        latLng,\n        latLngBounds,\n        loc;\n      if (data.results && data.results.length) {\n        for (var i = 0; i < data.results.length; i++) {\n          loc = data.results[i];\n          latLng = L.latLng(loc.geometry);\n          if (loc.annotations && loc.annotations.bounds) {\n            latLngBounds = L.latLngBounds(\n              L.latLng(loc.annotations.bounds.northeast),\n              L.latLng(loc.annotations.bounds.southwest)\n            );\n          } else {\n            latLngBounds = L.latLngBounds(latLng, latLng);\n          }\n          results.push({\n            name: loc.formatted,\n            bbox: latLngBounds,\n            center: latLng\n          });\n        }\n      }\n      cb.call(context, results);\n    });\n  },\n\n  suggest: function(query, cb, context) {\n    return this.geocode(query, cb, context);\n  },\n\n  reverse: function(location, scale, cb, context) {\n    var params = {\n      key: this._accessToken,\n      q: [location.lat, location.lng].join(',')\n    };\n    params = L.extend(params, this.options.reverseQueryParams);\n    getJSON(this.options.serviceUrl, params, function(data) {\n      var results = [],\n        latLng,\n        latLngBounds,\n        loc;\n      if (data.results && data.results.length) {\n        for (var i = 0; i < data.results.length; i++) {\n          loc = data.results[i];\n          latLng = L.latLng(loc.geometry);\n          if (loc.annotations && loc.annotations.bounds) {\n            latLngBounds = L.latLngBounds(\n              L.latLng(loc.annotations.bounds.northeast),\n              L.latLng(loc.annotations.bounds.southwest)\n            );\n          } else {\n            latLngBounds = L.latLngBounds(latLng, latLng);\n          }\n          results.push({\n            name: loc.formatted,\n            bbox: latLngBounds,\n            center: latLng\n          });\n        }\n      }\n      cb.call(context, results);\n    });\n  }\n});\n\nexport function opencage(apiKey, options) {\n  return new OpenCage(apiKey, options);\n}\n"]},"metadata":{},"sourceType":"module"}