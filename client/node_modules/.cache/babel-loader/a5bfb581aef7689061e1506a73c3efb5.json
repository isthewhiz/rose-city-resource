{"ast":null,"code":"import L from 'leaflet';\nimport { getJSON } from '../util';\nexport var Mapbox = L.Class.extend({\n  options: {\n    serviceUrl: 'https://api.mapbox.com/geocoding/v5/mapbox.places/',\n    geocodingQueryParams: {},\n    reverseQueryParams: {}\n  },\n  initialize: function (accessToken, options) {\n    L.setOptions(this, options);\n    this.options.geocodingQueryParams.access_token = accessToken;\n    this.options.reverseQueryParams.access_token = accessToken;\n  },\n  geocode: function (query, cb, context) {\n    var params = this.options.geocodingQueryParams;\n\n    if (params.proximity !== undefined && params.proximity.lat !== undefined && params.proximity.lng !== undefined) {\n      params.proximity = params.proximity.lng + ',' + params.proximity.lat;\n    }\n\n    getJSON(this.options.serviceUrl + encodeURIComponent(query) + '.json', params, function (data) {\n      var results = [],\n          loc,\n          latLng,\n          latLngBounds;\n\n      if (data.features && data.features.length) {\n        for (var i = 0; i <= data.features.length - 1; i++) {\n          loc = data.features[i];\n          latLng = L.latLng(loc.center.reverse());\n\n          if (loc.bbox) {\n            latLngBounds = L.latLngBounds(L.latLng(loc.bbox.slice(0, 2).reverse()), L.latLng(loc.bbox.slice(2, 4).reverse()));\n          } else {\n            latLngBounds = L.latLngBounds(latLng, latLng);\n          }\n\n          var properties = {\n            text: loc.text,\n            address: loc.address\n          };\n\n          for (var j = 0; j < (loc.context || []).length; j++) {\n            var id = loc.context[j].id.split('.')[0];\n            properties[id] = loc.context[j].text; // Get country code when available\n\n            if (loc.context[j].short_code) {\n              properties['countryShortCode'] = loc.context[j].short_code;\n            }\n          }\n\n          results[i] = {\n            name: loc.place_name,\n            bbox: latLngBounds,\n            center: latLng,\n            properties: properties\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  },\n  suggest: function (query, cb, context) {\n    return this.geocode(query, cb, context);\n  },\n  reverse: function (location, scale, cb, context) {\n    getJSON(this.options.serviceUrl + encodeURIComponent(location.lng) + ',' + encodeURIComponent(location.lat) + '.json', this.options.reverseQueryParams, function (data) {\n      var results = [],\n          loc,\n          latLng,\n          latLngBounds;\n\n      if (data.features && data.features.length) {\n        for (var i = 0; i <= data.features.length - 1; i++) {\n          loc = data.features[i];\n          latLng = L.latLng(loc.center.reverse());\n\n          if (loc.bbox) {\n            latLngBounds = L.latLngBounds(L.latLng(loc.bbox.slice(0, 2).reverse()), L.latLng(loc.bbox.slice(2, 4).reverse()));\n          } else {\n            latLngBounds = L.latLngBounds(latLng, latLng);\n          }\n\n          results[i] = {\n            name: loc.place_name,\n            bbox: latLngBounds,\n            center: latLng\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  }\n});\nexport function mapbox(accessToken, options) {\n  return new Mapbox(accessToken, options);\n}","map":{"version":3,"sources":["/home/isnardo/rcr/rose-city-resource/client/node_modules/leaflet-control-geocoder/src/geocoders/mapbox.js"],"names":["L","getJSON","Mapbox","Class","extend","options","serviceUrl","geocodingQueryParams","reverseQueryParams","initialize","accessToken","setOptions","access_token","geocode","query","cb","context","params","proximity","undefined","lat","lng","encodeURIComponent","data","results","loc","latLng","latLngBounds","features","length","i","center","reverse","bbox","slice","properties","text","address","j","id","split","short_code","name","place_name","call","suggest","location","scale","mapbox"],"mappings":"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","sourcesContent":["import L from 'leaflet';\nimport { getJSON } from '../util';\n\nexport var Mapbox = L.Class.extend({\n  options: {\n    serviceUrl: 'https://api.mapbox.com/geocoding/v5/mapbox.places/',\n    geocodingQueryParams: {},\n    reverseQueryParams: {}\n  },\n\n  initialize: function(accessToken, options) {\n    L.setOptions(this, options);\n    this.options.geocodingQueryParams.access_token = accessToken;\n    this.options.reverseQueryParams.access_token = accessToken;\n  },\n\n  geocode: function(query, cb, context) {\n    var params = this.options.geocodingQueryParams;\n    if (\n      params.proximity !== undefined &&\n      params.proximity.lat !== undefined &&\n      params.proximity.lng !== undefined\n    ) {\n      params.proximity = params.proximity.lng + ',' + params.proximity.lat;\n    }\n    getJSON(this.options.serviceUrl + encodeURIComponent(query) + '.json', params, function(data) {\n      var results = [],\n        loc,\n        latLng,\n        latLngBounds;\n      if (data.features && data.features.length) {\n        for (var i = 0; i <= data.features.length - 1; i++) {\n          loc = data.features[i];\n          latLng = L.latLng(loc.center.reverse());\n          if (loc.bbox) {\n            latLngBounds = L.latLngBounds(\n              L.latLng(loc.bbox.slice(0, 2).reverse()),\n              L.latLng(loc.bbox.slice(2, 4).reverse())\n            );\n          } else {\n            latLngBounds = L.latLngBounds(latLng, latLng);\n          }\n\n          var properties = {\n            text: loc.text,\n            address: loc.address\n          };\n\n          for (var j = 0; j < (loc.context || []).length; j++) {\n            var id = loc.context[j].id.split('.')[0];\n            properties[id] = loc.context[j].text;\n\n            // Get country code when available\n            if (loc.context[j].short_code) {\n              properties['countryShortCode'] = loc.context[j].short_code\n            }\n          }\n\n          results[i] = {\n            name: loc.place_name,\n            bbox: latLngBounds,\n            center: latLng,\n            properties: properties\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  },\n\n  suggest: function(query, cb, context) {\n    return this.geocode(query, cb, context);\n  },\n\n  reverse: function(location, scale, cb, context) {\n    getJSON(\n      this.options.serviceUrl +\n        encodeURIComponent(location.lng) +\n        ',' +\n        encodeURIComponent(location.lat) +\n        '.json',\n      this.options.reverseQueryParams,\n      function(data) {\n        var results = [],\n          loc,\n          latLng,\n          latLngBounds;\n        if (data.features && data.features.length) {\n          for (var i = 0; i <= data.features.length - 1; i++) {\n            loc = data.features[i];\n            latLng = L.latLng(loc.center.reverse());\n            if (loc.bbox) {\n              latLngBounds = L.latLngBounds(\n                L.latLng(loc.bbox.slice(0, 2).reverse()),\n                L.latLng(loc.bbox.slice(2, 4).reverse())\n              );\n            } else {\n              latLngBounds = L.latLngBounds(latLng, latLng);\n            }\n            results[i] = {\n              name: loc.place_name,\n              bbox: latLngBounds,\n              center: latLng\n            };\n          }\n        }\n\n        cb.call(context, results);\n      }\n    );\n  }\n});\n\nexport function mapbox(accessToken, options) {\n  return new Mapbox(accessToken, options);\n}\n"]},"metadata":{},"sourceType":"module"}