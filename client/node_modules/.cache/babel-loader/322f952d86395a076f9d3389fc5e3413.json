{"ast":null,"code":"import L from 'leaflet';\nimport { getJSON } from '../util';\nexport var ArcGis = L.Class.extend({\n  options: {\n    service_url: 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer'\n  },\n  initialize: function (accessToken, options) {\n    L.setOptions(this, options);\n    this._accessToken = accessToken;\n  },\n  geocode: function (query, cb, context) {\n    var params = {\n      SingleLine: query,\n      outFields: 'Addr_Type',\n      forStorage: false,\n      maxLocations: 10,\n      f: 'json'\n    };\n\n    if (this._key && this._key.length) {\n      params.token = this._key;\n    }\n\n    getJSON(this.options.service_url + '/findAddressCandidates', L.extend(params, this.options.geocodingQueryParams), function (data) {\n      var results = [],\n          loc,\n          latLng,\n          latLngBounds;\n\n      if (data.candidates && data.candidates.length) {\n        for (var i = 0; i <= data.candidates.length - 1; i++) {\n          loc = data.candidates[i];\n          latLng = L.latLng(loc.location.y, loc.location.x);\n          latLngBounds = L.latLngBounds(L.latLng(loc.extent.ymax, loc.extent.xmax), L.latLng(loc.extent.ymin, loc.extent.xmin));\n          results[i] = {\n            name: loc.address,\n            bbox: latLngBounds,\n            center: latLng\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  },\n  suggest: function (query, cb, context) {\n    return this.geocode(query, cb, context);\n  },\n  reverse: function (location, scale, cb, context) {\n    var params = {\n      location: encodeURIComponent(location.lng) + ',' + encodeURIComponent(location.lat),\n      distance: 100,\n      f: 'json'\n    };\n    getJSON(this.options.service_url + '/reverseGeocode', params, function (data) {\n      var result = [],\n          loc;\n\n      if (data && !data.error) {\n        loc = L.latLng(data.location.y, data.location.x);\n        result.push({\n          name: data.address.Match_addr,\n          center: loc,\n          bounds: L.latLngBounds(loc, loc)\n        });\n      }\n\n      cb.call(context, result);\n    });\n  }\n});\nexport function arcgis(accessToken, options) {\n  return new ArcGis(accessToken, options);\n}","map":{"version":3,"sources":["/home/isnardo/rcr/rose-city-resource/client/node_modules/leaflet-control-geocoder/src/geocoders/arcgis.js"],"names":["L","getJSON","ArcGis","Class","extend","options","service_url","initialize","accessToken","setOptions","_accessToken","geocode","query","cb","context","params","SingleLine","outFields","forStorage","maxLocations","f","_key","length","token","geocodingQueryParams","data","results","loc","latLng","latLngBounds","candidates","i","location","y","x","extent","ymax","xmax","ymin","xmin","name","address","bbox","center","call","suggest","reverse","scale","encodeURIComponent","lng","lat","distance","result","error","push","Match_addr","bounds","arcgis"],"mappings":"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","sourcesContent":["import L from 'leaflet';\nimport { getJSON } from '../util';\n\nexport var ArcGis = L.Class.extend({\n  options: {\n    service_url: 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer'\n  },\n\n  initialize: function(accessToken, options) {\n    L.setOptions(this, options);\n    this._accessToken = accessToken;\n  },\n\n  geocode: function(query, cb, context) {\n    var params = {\n      SingleLine: query,\n      outFields: 'Addr_Type',\n      forStorage: false,\n      maxLocations: 10,\n      f: 'json'\n    };\n\n    if (this._key && this._key.length) {\n      params.token = this._key;\n    }\n\n    getJSON(\n      this.options.service_url + '/findAddressCandidates',\n      L.extend(params, this.options.geocodingQueryParams),\n      function(data) {\n        var results = [],\n          loc,\n          latLng,\n          latLngBounds;\n\n        if (data.candidates && data.candidates.length) {\n          for (var i = 0; i <= data.candidates.length - 1; i++) {\n            loc = data.candidates[i];\n            latLng = L.latLng(loc.location.y, loc.location.x);\n            latLngBounds = L.latLngBounds(\n              L.latLng(loc.extent.ymax, loc.extent.xmax),\n              L.latLng(loc.extent.ymin, loc.extent.xmin)\n            );\n            results[i] = {\n              name: loc.address,\n              bbox: latLngBounds,\n              center: latLng\n            };\n          }\n        }\n\n        cb.call(context, results);\n      }\n    );\n  },\n\n  suggest: function(query, cb, context) {\n    return this.geocode(query, cb, context);\n  },\n\n  reverse: function(location, scale, cb, context) {\n    var params = {\n      location: encodeURIComponent(location.lng) + ',' + encodeURIComponent(location.lat),\n      distance: 100,\n      f: 'json'\n    };\n\n    getJSON(this.options.service_url + '/reverseGeocode', params, function(data) {\n      var result = [],\n        loc;\n\n      if (data && !data.error) {\n        loc = L.latLng(data.location.y, data.location.x);\n        result.push({\n          name: data.address.Match_addr,\n          center: loc,\n          bounds: L.latLngBounds(loc, loc)\n        });\n      }\n\n      cb.call(context, result);\n    });\n  }\n});\n\nexport function arcgis(accessToken, options) {\n  return new ArcGis(accessToken, options);\n}\n"]},"metadata":{},"sourceType":"module"}