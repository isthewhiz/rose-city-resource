{"ast":null,"code":"import * as distance from '@turf/distance';\nimport * as point from 'turf-point'; //pass in parameters as list\n\nexport function findDistance(point1, point2) {\n  const from = point(point1);\n  const to = point(point2);\n  const options = {\n    units: 'miles'\n  };\n  const pointDistance = distance.default(from, to, options);\n  return pointDistance;\n}\n\nfunction getCurrentLocation(options) {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(resolve, ({\n      code,\n      message\n    }) => reject(Object.assign(new Error(message), {\n      name: 'PositionError',\n      code\n    })), options);\n  });\n}\n\nexport async function inOutLocation() {\n  try {\n    return await getCurrentLocation({\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    });\n  } catch (e) {\n    if (e.name === 'PositionError') {\n      console.log(e.message + '. code = ' + e.code);\n    }\n  }\n}","map":{"version":3,"sources":["/home/isnardo/rcr/rose-city-resource/client/src/utils/distance.js"],"names":["distance","point","findDistance","point1","point2","from","to","options","units","pointDistance","default","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","code","message","Object","assign","Error","name","inOutLocation","enableHighAccuracy","timeout","maximumAge","e","console","log"],"mappings":"AAAA,OAAO,KAAKA,QAAZ,MAA0B,gBAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,YAAvB,C,CACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,MAA9B,EAAsC;AAC3C,QAAMC,IAAI,GAAGJ,KAAK,CAACE,MAAD,CAAlB;AACA,QAAMG,EAAE,GAAGL,KAAK,CAACG,MAAD,CAAhB;AACA,QAAMG,OAAO,GAAG;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAhB;AACA,QAAMC,aAAa,GAAGT,QAAQ,CAACU,OAAT,CAAiBL,IAAjB,EAAuBC,EAAvB,EAA2BC,OAA3B,CAAtB;AACA,SAAOE,aAAP;AACD;;AAED,SAASE,kBAAT,CAA4BJ,OAA5B,EAAqC;AACnC,SAAO,IAAIK,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CACEJ,OADF,EAEE,CAAC;AAAEK,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAD,KACEL,MAAM,CACJM,MAAM,CAACC,MAAP,CAAc,IAAIC,KAAJ,CAAUH,OAAV,CAAd,EAAkC;AAAEI,MAAAA,IAAI,EAAE,eAAR;AAAyBL,MAAAA;AAAzB,KAAlC,CADI,CAHV,EAMEX,OANF;AAQD,GATM,CAAP;AAUD;;AACD,OAAO,eAAeiB,aAAf,GAA+B;AACpC,MAAI;AACF,WAAO,MAAMb,kBAAkB,CAAC;AAC9Bc,MAAAA,kBAAkB,EAAE,IADU;AAE9BC,MAAAA,OAAO,EAAE,IAFqB;AAG9BC,MAAAA,UAAU,EAAE;AAHkB,KAAD,CAA/B;AAKD,GAND,CAME,OAAOC,CAAP,EAAU;AACV,QAAIA,CAAC,CAACL,IAAF,KAAW,eAAf,EAAgC;AAC9BM,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACT,OAAF,GAAY,WAAZ,GAA0BS,CAAC,CAACV,IAAxC;AACD;AACF;AACF","sourcesContent":["import * as distance from '@turf/distance';\nimport * as point from 'turf-point';\n//pass in parameters as list\n\nexport function findDistance(point1, point2) {\n  const from = point(point1);\n  const to = point(point2);\n  const options = { units: 'miles' };\n  const pointDistance = distance.default(from, to, options);\n  return pointDistance;\n}\n\nfunction getCurrentLocation(options) {\n  return new Promise((resolve, reject) => {\n    navigator.geolocation.getCurrentPosition(\n      resolve,\n      ({ code, message }) =>\n        reject(\n          Object.assign(new Error(message), { name: 'PositionError', code })\n        ),\n      options\n    );\n  });\n}\nexport async function inOutLocation() {\n  try {\n    return await getCurrentLocation({\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    });\n  } catch (e) {\n    if (e.name === 'PositionError') {\n      console.log(e.message + '. code = ' + e.code);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}