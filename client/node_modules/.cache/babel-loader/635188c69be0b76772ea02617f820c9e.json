{"ast":null,"code":"import L from 'leaflet';\nimport { getJSON } from '../util';\nexport var Google = L.Class.extend({\n  options: {\n    serviceUrl: 'https://maps.googleapis.com/maps/api/geocode/json',\n    geocodingQueryParams: {},\n    reverseQueryParams: {}\n  },\n  initialize: function (key, options) {\n    this._key = key;\n    L.setOptions(this, options); // Backwards compatibility\n\n    this.options.serviceUrl = this.options.service_url || this.options.serviceUrl;\n  },\n  geocode: function (query, cb, context) {\n    var params = {\n      address: query\n    };\n\n    if (this._key && this._key.length) {\n      params.key = this._key;\n    }\n\n    params = L.Util.extend(params, this.options.geocodingQueryParams);\n    getJSON(this.options.serviceUrl, params, function (data) {\n      var results = [],\n          loc,\n          latLng,\n          latLngBounds;\n\n      if (data.results && data.results.length) {\n        for (var i = 0; i <= data.results.length - 1; i++) {\n          loc = data.results[i];\n          latLng = L.latLng(loc.geometry.location);\n          latLngBounds = L.latLngBounds(L.latLng(loc.geometry.viewport.northeast), L.latLng(loc.geometry.viewport.southwest));\n          results[i] = {\n            name: loc.formatted_address,\n            bbox: latLngBounds,\n            center: latLng,\n            properties: loc.address_components\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  },\n  reverse: function (location, scale, cb, context) {\n    var params = {\n      latlng: encodeURIComponent(location.lat) + ',' + encodeURIComponent(location.lng)\n    };\n    params = L.Util.extend(params, this.options.reverseQueryParams);\n\n    if (this._key && this._key.length) {\n      params.key = this._key;\n    }\n\n    getJSON(this.options.serviceUrl, params, function (data) {\n      var results = [],\n          loc,\n          latLng,\n          latLngBounds;\n\n      if (data.results && data.results.length) {\n        for (var i = 0; i <= data.results.length - 1; i++) {\n          loc = data.results[i];\n          latLng = L.latLng(loc.geometry.location);\n          latLngBounds = L.latLngBounds(L.latLng(loc.geometry.viewport.northeast), L.latLng(loc.geometry.viewport.southwest));\n          results[i] = {\n            name: loc.formatted_address,\n            bbox: latLngBounds,\n            center: latLng,\n            properties: loc.address_components\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  }\n});\nexport function google(key, options) {\n  return new Google(key, options);\n}","map":{"version":3,"sources":["/home/isnardo/rcr/rose-city-resource/client/node_modules/leaflet-control-geocoder/src/geocoders/google.js"],"names":["L","getJSON","Google","Class","extend","options","serviceUrl","geocodingQueryParams","reverseQueryParams","initialize","key","_key","setOptions","service_url","geocode","query","cb","context","params","address","length","Util","data","results","loc","latLng","latLngBounds","i","geometry","location","viewport","northeast","southwest","name","formatted_address","bbox","center","properties","address_components","call","reverse","scale","latlng","encodeURIComponent","lat","lng","google"],"mappings":"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","sourcesContent":["import L from 'leaflet';\nimport { getJSON } from '../util';\n\nexport var Google = L.Class.extend({\n  options: {\n    serviceUrl: 'https://maps.googleapis.com/maps/api/geocode/json',\n    geocodingQueryParams: {},\n    reverseQueryParams: {}\n  },\n\n  initialize: function(key, options) {\n    this._key = key;\n    L.setOptions(this, options);\n    // Backwards compatibility\n    this.options.serviceUrl = this.options.service_url || this.options.serviceUrl;\n  },\n\n  geocode: function(query, cb, context) {\n    var params = {\n      address: query\n    };\n\n    if (this._key && this._key.length) {\n      params.key = this._key;\n    }\n\n    params = L.Util.extend(params, this.options.geocodingQueryParams);\n\n    getJSON(this.options.serviceUrl, params, function(data) {\n      var results = [],\n        loc,\n        latLng,\n        latLngBounds;\n      if (data.results && data.results.length) {\n        for (var i = 0; i <= data.results.length - 1; i++) {\n          loc = data.results[i];\n          latLng = L.latLng(loc.geometry.location);\n          latLngBounds = L.latLngBounds(\n            L.latLng(loc.geometry.viewport.northeast),\n            L.latLng(loc.geometry.viewport.southwest)\n          );\n          results[i] = {\n            name: loc.formatted_address,\n            bbox: latLngBounds,\n            center: latLng,\n            properties: loc.address_components\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  },\n\n  reverse: function(location, scale, cb, context) {\n    var params = {\n      latlng: encodeURIComponent(location.lat) + ',' + encodeURIComponent(location.lng)\n    };\n    params = L.Util.extend(params, this.options.reverseQueryParams);\n    if (this._key && this._key.length) {\n      params.key = this._key;\n    }\n\n    getJSON(this.options.serviceUrl, params, function(data) {\n      var results = [],\n        loc,\n        latLng,\n        latLngBounds;\n      if (data.results && data.results.length) {\n        for (var i = 0; i <= data.results.length - 1; i++) {\n          loc = data.results[i];\n          latLng = L.latLng(loc.geometry.location);\n          latLngBounds = L.latLngBounds(\n            L.latLng(loc.geometry.viewport.northeast),\n            L.latLng(loc.geometry.viewport.southwest)\n          );\n          results[i] = {\n            name: loc.formatted_address,\n            bbox: latLngBounds,\n            center: latLng,\n            properties: loc.address_components\n          };\n        }\n      }\n\n      cb.call(context, results);\n    });\n  }\n});\n\nexport function google(key, options) {\n  return new Google(key, options);\n}\n"]},"metadata":{},"sourceType":"module"}