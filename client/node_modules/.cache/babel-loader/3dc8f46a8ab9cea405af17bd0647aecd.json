{"ast":null,"code":"import L from 'leaflet';\nimport { template, getJSON } from '../util';\nexport var Nominatim = L.Class.extend({\n  options: {\n    serviceUrl: 'https://nominatim.openstreetmap.org/',\n    geocodingQueryParams: {},\n    reverseQueryParams: {},\n    htmlTemplate: function (r) {\n      var a = r.address,\n          className,\n          parts = [];\n\n      if (a.road || a.building) {\n        parts.push('{building} {road} {house_number}');\n      }\n\n      if (a.city || a.town || a.village || a.hamlet) {\n        className = parts.length > 0 ? 'leaflet-control-geocoder-address-detail' : '';\n        parts.push('<span class=\"' + className + '\">{postcode} {city} {town} {village} {hamlet}</span>');\n      }\n\n      if (a.state || a.country) {\n        className = parts.length > 0 ? 'leaflet-control-geocoder-address-context' : '';\n        parts.push('<span class=\"' + className + '\">{state} {country}</span>');\n      }\n\n      return template(parts.join('<br/>'), a, true);\n    }\n  },\n  initialize: function (options) {\n    L.Util.setOptions(this, options);\n  },\n  geocode: function (query, cb, context) {\n    getJSON(this.options.serviceUrl + 'search', L.extend({\n      q: query,\n      limit: 5,\n      format: 'json',\n      addressdetails: 1\n    }, this.options.geocodingQueryParams), L.bind(function (data) {\n      var results = [];\n\n      for (var i = data.length - 1; i >= 0; i--) {\n        var bbox = data[i].boundingbox;\n\n        for (var j = 0; j < 4; j++) bbox[j] = parseFloat(bbox[j]);\n\n        results[i] = {\n          icon: data[i].icon,\n          name: data[i].display_name,\n          html: this.options.htmlTemplate ? this.options.htmlTemplate(data[i]) : undefined,\n          bbox: L.latLngBounds([bbox[0], bbox[2]], [bbox[1], bbox[3]]),\n          center: L.latLng(data[i].lat, data[i].lon),\n          properties: data[i]\n        };\n      }\n\n      cb.call(context, results);\n    }, this));\n  },\n  reverse: function (location, scale, cb, context) {\n    getJSON(this.options.serviceUrl + 'reverse', L.extend({\n      lat: location.lat,\n      lon: location.lng,\n      zoom: Math.round(Math.log(scale / 256) / Math.log(2)),\n      addressdetails: 1,\n      format: 'json'\n    }, this.options.reverseQueryParams), L.bind(function (data) {\n      var result = [],\n          loc;\n\n      if (data && data.lat && data.lon) {\n        loc = L.latLng(data.lat, data.lon);\n        result.push({\n          name: data.display_name,\n          html: this.options.htmlTemplate ? this.options.htmlTemplate(data) : undefined,\n          center: loc,\n          bounds: L.latLngBounds(loc, loc),\n          properties: data\n        });\n      }\n\n      cb.call(context, result);\n    }, this));\n  }\n});\nexport function nominatim(options) {\n  return new Nominatim(options);\n}","map":{"version":3,"sources":["/home/isnardo/rcr/rose-city-resource/client/node_modules/leaflet-control-geocoder/src/geocoders/nominatim.js"],"names":["L","template","getJSON","Nominatim","Class","extend","options","serviceUrl","geocodingQueryParams","reverseQueryParams","htmlTemplate","r","a","address","className","parts","road","building","push","city","town","village","hamlet","length","state","country","join","initialize","Util","setOptions","geocode","query","cb","context","q","limit","format","addressdetails","bind","data","results","i","bbox","boundingbox","j","parseFloat","icon","name","display_name","html","undefined","latLngBounds","center","latLng","lat","lon","properties","call","reverse","location","scale","lng","zoom","Math","round","log","result","loc","bounds","nominatim"],"mappings":"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","sourcesContent":["import L from 'leaflet';\nimport { template, getJSON } from '../util';\n\nexport var Nominatim = L.Class.extend({\n  options: {\n    serviceUrl: 'https://nominatim.openstreetmap.org/',\n    geocodingQueryParams: {},\n    reverseQueryParams: {},\n    htmlTemplate: function(r) {\n      var a = r.address,\n        className,\n        parts = [];\n      if (a.road || a.building) {\n        parts.push('{building} {road} {house_number}');\n      }\n\n      if (a.city || a.town || a.village || a.hamlet) {\n        className = parts.length > 0 ? 'leaflet-control-geocoder-address-detail' : '';\n        parts.push(\n          '<span class=\"' + className + '\">{postcode} {city} {town} {village} {hamlet}</span>'\n        );\n      }\n\n      if (a.state || a.country) {\n        className = parts.length > 0 ? 'leaflet-control-geocoder-address-context' : '';\n        parts.push('<span class=\"' + className + '\">{state} {country}</span>');\n      }\n\n      return template(parts.join('<br/>'), a, true);\n    }\n  },\n\n  initialize: function(options) {\n    L.Util.setOptions(this, options);\n  },\n\n  geocode: function(query, cb, context) {\n    getJSON(\n      this.options.serviceUrl + 'search',\n      L.extend(\n        {\n          q: query,\n          limit: 5,\n          format: 'json',\n          addressdetails: 1\n        },\n        this.options.geocodingQueryParams\n      ),\n      L.bind(function(data) {\n        var results = [];\n        for (var i = data.length - 1; i >= 0; i--) {\n          var bbox = data[i].boundingbox;\n          for (var j = 0; j < 4; j++) bbox[j] = parseFloat(bbox[j]);\n          results[i] = {\n            icon: data[i].icon,\n            name: data[i].display_name,\n            html: this.options.htmlTemplate ? this.options.htmlTemplate(data[i]) : undefined,\n            bbox: L.latLngBounds([bbox[0], bbox[2]], [bbox[1], bbox[3]]),\n            center: L.latLng(data[i].lat, data[i].lon),\n            properties: data[i]\n          };\n        }\n        cb.call(context, results);\n      }, this)\n    );\n  },\n\n  reverse: function(location, scale, cb, context) {\n    getJSON(\n      this.options.serviceUrl + 'reverse',\n      L.extend(\n        {\n          lat: location.lat,\n          lon: location.lng,\n          zoom: Math.round(Math.log(scale / 256) / Math.log(2)),\n          addressdetails: 1,\n          format: 'json'\n        },\n        this.options.reverseQueryParams\n      ),\n      L.bind(function(data) {\n        var result = [],\n          loc;\n\n        if (data && data.lat && data.lon) {\n          loc = L.latLng(data.lat, data.lon);\n          result.push({\n            name: data.display_name,\n            html: this.options.htmlTemplate ? this.options.htmlTemplate(data) : undefined,\n            center: loc,\n            bounds: L.latLngBounds(loc, loc),\n            properties: data\n          });\n        }\n\n        cb.call(context, result);\n      }, this)\n    );\n  }\n});\n\nexport function nominatim(options) {\n  return new Nominatim(options);\n}\n"]},"metadata":{},"sourceType":"module"}