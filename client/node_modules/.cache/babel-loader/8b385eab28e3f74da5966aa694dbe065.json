{"ast":null,"code":"import L from 'leaflet';\nimport { getJSON } from '../util';\nexport var What3Words = L.Class.extend({\n  options: {\n    serviceUrl: 'https://api.what3words.com/v2/'\n  },\n  initialize: function (accessToken) {\n    this._accessToken = accessToken;\n  },\n  geocode: function (query, cb, context) {\n    //get three words and make a dot based string\n    getJSON(this.options.serviceUrl + 'forward', {\n      key: this._accessToken,\n      addr: query.split(/\\s+/).join('.')\n    }, function (data) {\n      var results = [],\n          latLng,\n          latLngBounds;\n\n      if (data.geometry) {\n        latLng = L.latLng(data.geometry['lat'], data.geometry['lng']);\n        latLngBounds = L.latLngBounds(latLng, latLng);\n        results[0] = {\n          name: data.words,\n          bbox: latLngBounds,\n          center: latLng\n        };\n      }\n\n      cb.call(context, results);\n    });\n  },\n  suggest: function (query, cb, context) {\n    return this.geocode(query, cb, context);\n  },\n  reverse: function (location, scale, cb, context) {\n    getJSON(this.options.serviceUrl + 'reverse', {\n      key: this._accessToken,\n      coords: [location.lat, location.lng].join(',')\n    }, function (data) {\n      var results = [],\n          latLng,\n          latLngBounds;\n\n      if (data.status.status == 200) {\n        latLng = L.latLng(data.geometry['lat'], data.geometry['lng']);\n        latLngBounds = L.latLngBounds(latLng, latLng);\n        results[0] = {\n          name: data.words,\n          bbox: latLngBounds,\n          center: latLng\n        };\n      }\n\n      cb.call(context, results);\n    });\n  }\n});\nexport function what3words(accessToken) {\n  return new What3Words(accessToken);\n}","map":{"version":3,"sources":["/home/isnardo/rcr/rose-city-resource/client/node_modules/leaflet-control-geocoder/src/geocoders/what3words.js"],"names":["L","getJSON","What3Words","Class","extend","options","serviceUrl","initialize","accessToken","_accessToken","geocode","query","cb","context","key","addr","split","join","data","results","latLng","latLngBounds","geometry","name","words","bbox","center","call","suggest","reverse","location","scale","coords","lat","lng","status","what3words"],"mappings":"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","sourcesContent":["import L from 'leaflet';\nimport { getJSON } from '../util';\n\nexport var What3Words = L.Class.extend({\n  options: {\n    serviceUrl: 'https://api.what3words.com/v2/'\n  },\n\n  initialize: function(accessToken) {\n    this._accessToken = accessToken;\n  },\n\n  geocode: function(query, cb, context) {\n    //get three words and make a dot based string\n    getJSON(\n      this.options.serviceUrl + 'forward',\n      {\n        key: this._accessToken,\n        addr: query.split(/\\s+/).join('.')\n      },\n      function(data) {\n        var results = [],\n          latLng,\n          latLngBounds;\n        if (data.geometry) {\n          latLng = L.latLng(data.geometry['lat'], data.geometry['lng']);\n          latLngBounds = L.latLngBounds(latLng, latLng);\n          results[0] = {\n            name: data.words,\n            bbox: latLngBounds,\n            center: latLng\n          };\n        }\n\n        cb.call(context, results);\n      }\n    );\n  },\n\n  suggest: function(query, cb, context) {\n    return this.geocode(query, cb, context);\n  },\n\n  reverse: function(location, scale, cb, context) {\n    getJSON(\n      this.options.serviceUrl + 'reverse',\n      {\n        key: this._accessToken,\n        coords: [location.lat, location.lng].join(',')\n      },\n      function(data) {\n        var results = [],\n          latLng,\n          latLngBounds;\n        if (data.status.status == 200) {\n          latLng = L.latLng(data.geometry['lat'], data.geometry['lng']);\n          latLngBounds = L.latLngBounds(latLng, latLng);\n          results[0] = {\n            name: data.words,\n            bbox: latLngBounds,\n            center: latLng\n          };\n        }\n        cb.call(context, results);\n      }\n    );\n  }\n});\n\nexport function what3words(accessToken) {\n  return new What3Words(accessToken);\n}\n"]},"metadata":{},"sourceType":"module"}