{"ast":null,"code":"import L from 'leaflet';\nimport { getJSON } from '../util';\nexport var Neutrino = L.Class.extend({\n  options: {\n    userId: '<insert your userId here>',\n    apiKey: '<insert your apiKey here>',\n    serviceUrl: 'https://neutrinoapi.com/'\n  },\n  initialize: function (options) {\n    L.Util.setOptions(this, options);\n  },\n  // https://www.neutrinoapi.com/api/geocode-address/\n  geocode: function (query, cb, context) {\n    getJSON(this.options.serviceUrl + 'geocode-address', {\n      apiKey: this.options.apiKey,\n      userId: this.options.userId,\n      //get three words and make a dot based string\n      address: query.split(/\\s+/).join('.')\n    }, function (data) {\n      var results = [],\n          latLng,\n          latLngBounds;\n\n      if (data.locations) {\n        data.geometry = data.locations[0];\n        latLng = L.latLng(data.geometry['latitude'], data.geometry['longitude']);\n        latLngBounds = L.latLngBounds(latLng, latLng);\n        results[0] = {\n          name: data.geometry.address,\n          bbox: latLngBounds,\n          center: latLng\n        };\n      }\n\n      cb.call(context, results);\n    });\n  },\n  suggest: function (query, cb, context) {\n    return this.geocode(query, cb, context);\n  },\n  // https://www.neutrinoapi.com/api/geocode-reverse/\n  reverse: function (location, scale, cb, context) {\n    getJSON(this.options.serviceUrl + 'geocode-reverse', {\n      apiKey: this.options.apiKey,\n      userId: this.options.userId,\n      latitude: location.lat,\n      longitude: location.lng\n    }, function (data) {\n      var results = [],\n          latLng,\n          latLngBounds;\n\n      if (data.status.status == 200 && data.found) {\n        latLng = L.latLng(location.lat, location.lng);\n        latLngBounds = L.latLngBounds(latLng, latLng);\n        results[0] = {\n          name: data.address,\n          bbox: latLngBounds,\n          center: latLng\n        };\n      }\n\n      cb.call(context, results);\n    });\n  }\n});\nexport function neutrino(accessToken) {\n  return new Neutrino(accessToken);\n}","map":{"version":3,"sources":["/home/isnardo/rcr/rose-city-resource/client/node_modules/leaflet-control-geocoder/src/geocoders/neutrino.js"],"names":["L","getJSON","Neutrino","Class","extend","options","userId","apiKey","serviceUrl","initialize","Util","setOptions","geocode","query","cb","context","address","split","join","data","results","latLng","latLngBounds","locations","geometry","name","bbox","center","call","suggest","reverse","location","scale","latitude","lat","longitude","lng","status","found","neutrino","accessToken"],"mappings":"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","sourcesContent":["import L from 'leaflet';\nimport { getJSON } from '../util';\n\nexport var Neutrino = L.Class.extend({\n  options: {\n    userId: '<insert your userId here>',\n    apiKey: '<insert your apiKey here>',\n    serviceUrl: 'https://neutrinoapi.com/'\n  },\n\n  initialize: function(options) {\n    L.Util.setOptions(this, options);\n  },\n\n  // https://www.neutrinoapi.com/api/geocode-address/\n  geocode: function(query, cb, context) {\n    getJSON(\n      this.options.serviceUrl + 'geocode-address',\n      {\n        apiKey: this.options.apiKey,\n        userId: this.options.userId,\n        //get three words and make a dot based string\n        address: query.split(/\\s+/).join('.')\n      },\n      function(data) {\n        var results = [],\n          latLng,\n          latLngBounds;\n        if (data.locations) {\n          data.geometry = data.locations[0];\n          latLng = L.latLng(data.geometry['latitude'], data.geometry['longitude']);\n          latLngBounds = L.latLngBounds(latLng, latLng);\n          results[0] = {\n            name: data.geometry.address,\n            bbox: latLngBounds,\n            center: latLng\n          };\n        }\n\n        cb.call(context, results);\n      }\n    );\n  },\n\n  suggest: function(query, cb, context) {\n    return this.geocode(query, cb, context);\n  },\n\n  // https://www.neutrinoapi.com/api/geocode-reverse/\n  reverse: function(location, scale, cb, context) {\n    getJSON(\n      this.options.serviceUrl + 'geocode-reverse',\n      {\n        apiKey: this.options.apiKey,\n        userId: this.options.userId,\n        latitude: location.lat,\n        longitude: location.lng\n      },\n      function(data) {\n        var results = [],\n          latLng,\n          latLngBounds;\n        if (data.status.status == 200 && data.found) {\n          latLng = L.latLng(location.lat, location.lng);\n          latLngBounds = L.latLngBounds(latLng, latLng);\n          results[0] = {\n            name: data.address,\n            bbox: latLngBounds,\n            center: latLng\n          };\n        }\n        cb.call(context, results);\n      }\n    );\n  }\n});\n\nexport function neutrino(accessToken) {\n  return new Neutrino(accessToken);\n}\n"]},"metadata":{},"sourceType":"module"}