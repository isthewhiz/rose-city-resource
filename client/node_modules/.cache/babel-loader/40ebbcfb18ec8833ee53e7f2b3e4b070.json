{"ast":null,"code":"import L from 'leaflet';\nimport { getJSON } from '../util';\nexport var MapQuest = L.Class.extend({\n  options: {\n    serviceUrl: 'https://www.mapquestapi.com/geocoding/v1'\n  },\n  initialize: function (key, options) {\n    // MapQuest seems to provide URI encoded API keys,\n    // so to avoid encoding them twice, we decode them here\n    this._key = decodeURIComponent(key);\n    L.Util.setOptions(this, options);\n  },\n  _formatName: function () {\n    var r = [],\n        i;\n\n    for (i = 0; i < arguments.length; i++) {\n      if (arguments[i]) {\n        r.push(arguments[i]);\n      }\n    }\n\n    return r.join(', ');\n  },\n  geocode: function (query, cb, context) {\n    getJSON(this.options.serviceUrl + '/address', {\n      key: this._key,\n      location: query,\n      limit: 5,\n      outFormat: 'json'\n    }, L.bind(function (data) {\n      var results = [],\n          loc,\n          latLng;\n\n      if (data.results && data.results[0].locations) {\n        for (var i = data.results[0].locations.length - 1; i >= 0; i--) {\n          loc = data.results[0].locations[i];\n          latLng = L.latLng(loc.latLng);\n          results[i] = {\n            name: this._formatName(loc.street, loc.adminArea4, loc.adminArea3, loc.adminArea1),\n            bbox: L.latLngBounds(latLng, latLng),\n            center: latLng\n          };\n        }\n      }\n\n      cb.call(context, results);\n    }, this));\n  },\n  reverse: function (location, scale, cb, context) {\n    getJSON(this.options.serviceUrl + '/reverse', {\n      key: this._key,\n      location: location.lat + ',' + location.lng,\n      outputFormat: 'json'\n    }, L.bind(function (data) {\n      var results = [],\n          loc,\n          latLng;\n\n      if (data.results && data.results[0].locations) {\n        for (var i = data.results[0].locations.length - 1; i >= 0; i--) {\n          loc = data.results[0].locations[i];\n          latLng = L.latLng(loc.latLng);\n          results[i] = {\n            name: this._formatName(loc.street, loc.adminArea4, loc.adminArea3, loc.adminArea1),\n            bbox: L.latLngBounds(latLng, latLng),\n            center: latLng\n          };\n        }\n      }\n\n      cb.call(context, results);\n    }, this));\n  }\n});\nexport function mapQuest(key, options) {\n  return new MapQuest(key, options);\n}","map":{"version":3,"sources":["/home/isnardo/rcr/rose-city-resource/client/node_modules/leaflet-control-geocoder/src/geocoders/mapquest.js"],"names":["L","getJSON","MapQuest","Class","extend","options","serviceUrl","initialize","key","_key","decodeURIComponent","Util","setOptions","_formatName","r","i","arguments","length","push","join","geocode","query","cb","context","location","limit","outFormat","bind","data","results","loc","latLng","locations","name","street","adminArea4","adminArea3","adminArea1","bbox","latLngBounds","center","call","reverse","scale","lat","lng","outputFormat","mapQuest"],"mappings":"AAAA,OAAOA,CAAP,MAAc,SAAd;AACA,SAASC,OAAT,QAAwB,SAAxB;AAEA,OAAO,IAAIC,QAAQ,GAAGF,CAAC,CAACG,KAAF,CAAQC,MAAR,CAAe;AACnCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAE;AADL,GAD0B;AAKnCC,EAAAA,UAAU,EAAE,UAASC,GAAT,EAAcH,OAAd,EAAuB;AACjC;AACA;AACA,SAAKI,IAAL,GAAYC,kBAAkB,CAACF,GAAD,CAA9B;AAEAR,IAAAA,CAAC,CAACW,IAAF,CAAOC,UAAP,CAAkB,IAAlB,EAAwBP,OAAxB;AACD,GAXkC;AAanCQ,EAAAA,WAAW,EAAE,YAAW;AACtB,QAAIC,CAAC,GAAG,EAAR;AAAA,QACEC,CADF;;AAEA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,SAAS,CAACC,MAA1B,EAAkCF,CAAC,EAAnC,EAAuC;AACrC,UAAIC,SAAS,CAACD,CAAD,CAAb,EAAkB;AAChBD,QAAAA,CAAC,CAACI,IAAF,CAAOF,SAAS,CAACD,CAAD,CAAhB;AACD;AACF;;AAED,WAAOD,CAAC,CAACK,IAAF,CAAO,IAAP,CAAP;AACD,GAvBkC;AAyBnCC,EAAAA,OAAO,EAAE,UAASC,KAAT,EAAgBC,EAAhB,EAAoBC,OAApB,EAA6B;AACpCtB,IAAAA,OAAO,CACL,KAAKI,OAAL,CAAaC,UAAb,GAA0B,UADrB,EAEL;AACEE,MAAAA,GAAG,EAAE,KAAKC,IADZ;AAEEe,MAAAA,QAAQ,EAAEH,KAFZ;AAGEI,MAAAA,KAAK,EAAE,CAHT;AAIEC,MAAAA,SAAS,EAAE;AAJb,KAFK,EAQL1B,CAAC,CAAC2B,IAAF,CAAO,UAASC,IAAT,EAAe;AACpB,UAAIC,OAAO,GAAG,EAAd;AAAA,UACEC,GADF;AAAA,UAEEC,MAFF;;AAGA,UAAIH,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBG,SAApC,EAA+C;AAC7C,aAAK,IAAIjB,CAAC,GAAGa,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBG,SAAhB,CAA0Bf,MAA1B,GAAmC,CAAhD,EAAmDF,CAAC,IAAI,CAAxD,EAA2DA,CAAC,EAA5D,EAAgE;AAC9De,UAAAA,GAAG,GAAGF,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBG,SAAhB,CAA0BjB,CAA1B,CAAN;AACAgB,UAAAA,MAAM,GAAG/B,CAAC,CAAC+B,MAAF,CAASD,GAAG,CAACC,MAAb,CAAT;AACAF,UAAAA,OAAO,CAACd,CAAD,CAAP,GAAa;AACXkB,YAAAA,IAAI,EAAE,KAAKpB,WAAL,CAAiBiB,GAAG,CAACI,MAArB,EAA6BJ,GAAG,CAACK,UAAjC,EAA6CL,GAAG,CAACM,UAAjD,EAA6DN,GAAG,CAACO,UAAjE,CADK;AAEXC,YAAAA,IAAI,EAAEtC,CAAC,CAACuC,YAAF,CAAeR,MAAf,EAAuBA,MAAvB,CAFK;AAGXS,YAAAA,MAAM,EAAET;AAHG,WAAb;AAKD;AACF;;AAEDT,MAAAA,EAAE,CAACmB,IAAH,CAAQlB,OAAR,EAAiBM,OAAjB;AACD,KAjBD,EAiBG,IAjBH,CARK,CAAP;AA2BD,GArDkC;AAuDnCa,EAAAA,OAAO,EAAE,UAASlB,QAAT,EAAmBmB,KAAnB,EAA0BrB,EAA1B,EAA8BC,OAA9B,EAAuC;AAC9CtB,IAAAA,OAAO,CACL,KAAKI,OAAL,CAAaC,UAAb,GAA0B,UADrB,EAEL;AACEE,MAAAA,GAAG,EAAE,KAAKC,IADZ;AAEEe,MAAAA,QAAQ,EAAEA,QAAQ,CAACoB,GAAT,GAAe,GAAf,GAAqBpB,QAAQ,CAACqB,GAF1C;AAGEC,MAAAA,YAAY,EAAE;AAHhB,KAFK,EAOL9C,CAAC,CAAC2B,IAAF,CAAO,UAASC,IAAT,EAAe;AACpB,UAAIC,OAAO,GAAG,EAAd;AAAA,UACEC,GADF;AAAA,UAEEC,MAFF;;AAGA,UAAIH,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBG,SAApC,EAA+C;AAC7C,aAAK,IAAIjB,CAAC,GAAGa,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBG,SAAhB,CAA0Bf,MAA1B,GAAmC,CAAhD,EAAmDF,CAAC,IAAI,CAAxD,EAA2DA,CAAC,EAA5D,EAAgE;AAC9De,UAAAA,GAAG,GAAGF,IAAI,CAACC,OAAL,CAAa,CAAb,EAAgBG,SAAhB,CAA0BjB,CAA1B,CAAN;AACAgB,UAAAA,MAAM,GAAG/B,CAAC,CAAC+B,MAAF,CAASD,GAAG,CAACC,MAAb,CAAT;AACAF,UAAAA,OAAO,CAACd,CAAD,CAAP,GAAa;AACXkB,YAAAA,IAAI,EAAE,KAAKpB,WAAL,CAAiBiB,GAAG,CAACI,MAArB,EAA6BJ,GAAG,CAACK,UAAjC,EAA6CL,GAAG,CAACM,UAAjD,EAA6DN,GAAG,CAACO,UAAjE,CADK;AAEXC,YAAAA,IAAI,EAAEtC,CAAC,CAACuC,YAAF,CAAeR,MAAf,EAAuBA,MAAvB,CAFK;AAGXS,YAAAA,MAAM,EAAET;AAHG,WAAb;AAKD;AACF;;AAEDT,MAAAA,EAAE,CAACmB,IAAH,CAAQlB,OAAR,EAAiBM,OAAjB;AACD,KAjBD,EAiBG,IAjBH,CAPK,CAAP;AA0BD;AAlFkC,CAAf,CAAf;AAqFP,OAAO,SAASkB,QAAT,CAAkBvC,GAAlB,EAAuBH,OAAvB,EAAgC;AACrC,SAAO,IAAIH,QAAJ,CAAaM,GAAb,EAAkBH,OAAlB,CAAP;AACD","sourcesContent":["import L from 'leaflet';\nimport { getJSON } from '../util';\n\nexport var MapQuest = L.Class.extend({\n  options: {\n    serviceUrl: 'https://www.mapquestapi.com/geocoding/v1'\n  },\n\n  initialize: function(key, options) {\n    // MapQuest seems to provide URI encoded API keys,\n    // so to avoid encoding them twice, we decode them here\n    this._key = decodeURIComponent(key);\n\n    L.Util.setOptions(this, options);\n  },\n\n  _formatName: function() {\n    var r = [],\n      i;\n    for (i = 0; i < arguments.length; i++) {\n      if (arguments[i]) {\n        r.push(arguments[i]);\n      }\n    }\n\n    return r.join(', ');\n  },\n\n  geocode: function(query, cb, context) {\n    getJSON(\n      this.options.serviceUrl + '/address',\n      {\n        key: this._key,\n        location: query,\n        limit: 5,\n        outFormat: 'json'\n      },\n      L.bind(function(data) {\n        var results = [],\n          loc,\n          latLng;\n        if (data.results && data.results[0].locations) {\n          for (var i = data.results[0].locations.length - 1; i >= 0; i--) {\n            loc = data.results[0].locations[i];\n            latLng = L.latLng(loc.latLng);\n            results[i] = {\n              name: this._formatName(loc.street, loc.adminArea4, loc.adminArea3, loc.adminArea1),\n              bbox: L.latLngBounds(latLng, latLng),\n              center: latLng\n            };\n          }\n        }\n\n        cb.call(context, results);\n      }, this)\n    );\n  },\n\n  reverse: function(location, scale, cb, context) {\n    getJSON(\n      this.options.serviceUrl + '/reverse',\n      {\n        key: this._key,\n        location: location.lat + ',' + location.lng,\n        outputFormat: 'json'\n      },\n      L.bind(function(data) {\n        var results = [],\n          loc,\n          latLng;\n        if (data.results && data.results[0].locations) {\n          for (var i = data.results[0].locations.length - 1; i >= 0; i--) {\n            loc = data.results[0].locations[i];\n            latLng = L.latLng(loc.latLng);\n            results[i] = {\n              name: this._formatName(loc.street, loc.adminArea4, loc.adminArea3, loc.adminArea1),\n              bbox: L.latLngBounds(latLng, latLng),\n              center: latLng\n            };\n          }\n        }\n\n        cb.call(context, results);\n      }, this)\n    );\n  }\n});\n\nexport function mapQuest(key, options) {\n  return new MapQuest(key, options);\n}\n"]},"metadata":{},"sourceType":"module"}